apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    def globalConfiguration = rootProject.ext

    compileSdkVersion globalConfiguration.androidCompileSdkVersion
    buildToolsVersion globalConfiguration.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion globalConfiguration.androidMinSdkVersion
        targetSdkVersion globalConfiguration.androidTargetSdkVersion

        versionCode globalConfiguration.dataLibraryVersionCode
        versionName globalConfiguration.dataLibraryVersionName

        testInstrumentationRunner globalConfiguration.testInstrumentationRunner

    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

// Required for annotation processing plugins like Dagger
kapt {
    generateStubs = true
}
dependencies {
    def unitTestDependencies = rootProject.ext.unitTesting
    def commonDependencies = rootProject.ext.commonDependencies
    def domainDependencies = rootProject.ext.domainDependencies
    def compileTimeDependencies = rootProject.ext.compileTimeDependencies

    for (dependency in commonDependencies){
        compile dependency.value
    }

    for (dependency in domainDependencies){
        compile dependency.value
    }

    for (dependency in unitTestDependencies){
        testCompile dependency.value
    }

    //Compile Dependencies
    kapt compileTimeDependencies.daggerCompiler
    provided compileTimeDependencies.javaxAnnotation
    provided compileTimeDependencies.javaxInject

}
