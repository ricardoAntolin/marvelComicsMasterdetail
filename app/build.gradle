apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'realm-android'
apply plugin: 'kotlin-android-extensions'

android {
    def globalConfiguration = rootProject.ext

    compileSdkVersion globalConfiguration.androidCompileSdkVersion
    buildToolsVersion globalConfiguration.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion globalConfiguration.androidMinSdkVersion
        targetSdkVersion globalConfiguration.androidTargetSdkVersion

        applicationId globalConfiguration.androidApplicationId

        versionCode globalConfiguration.androidVersionCode
        versionName globalConfiguration.androidVersionName

        testInstrumentationRunner globalConfiguration.testInstrumentationRunner
        testApplicationId globalConfiguration.testApplicationId

    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

// Required for annotation processing plugins like Dagger
kapt {
    generateStubs = true
}

dependencies {
    def unitTestDependencies = rootProject.ext.unitTesting
    def acceptanceTestDependencies = rootProject.ext.acceptanceTesting
    def developmentDependencies = rootProject.ext.development
    def commonDependencies = rootProject.ext.commonDependencies
    def presentationDependencies = rootProject.ext.presentationDependencies
    def compileTimeDependencies = rootProject.ext.compileTimeDependencies

    for (dependency in commonDependencies) {
        compile dependency.value
    }
    for (dependency in presentationDependencies) {
        compile dependency.value
    }
    for (dependency in unitTestDependencies) {
        testCompile dependency.value
    }
    for (dependency in acceptanceTestDependencies) {
        androidTestCompile dependency.value
    }

    //Development dependencies
    debugCompile developmentDependencies.leakCanary
    releaseCompile developmentDependencies.leakCanaryNoop
    testCompile developmentDependencies.leakCanaryNoop

    //Compile Dependencies
    kapt compileTimeDependencies.daggerCompiler
    provided compileTimeDependencies.javaxAnnotation
    provided compileTimeDependencies.javaxInject

    //Module Dependencies
    compile project(':domain')
    compile project(':data')

    //RecyclerView test dependencies
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2') {
        // Necessary to avoid version conflicts
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
}
